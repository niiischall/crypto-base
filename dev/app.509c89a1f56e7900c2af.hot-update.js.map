{"version":3,"file":"app.509c89a1f56e7900c2af.hot-update.js","sources":["/Users/geekyants/Desktop/Hackathon-21/crypto-base/src/store/actions/actionHome.ts"],"sourcesContent":["import { Dispatch } from 'redux';\nimport { doc, setDoc } from 'firebase/firestore';\nimport db from '../../services/firebase';\n\nimport * as types from './actionTypes';\nimport { apiEndPoints, fetchApi } from '../../services/api';\n\nexport const getFollowingCoins = (coins: any[]) => {\n  return {\n    type: types.FOLLOWING_COINS,\n    followingCoins: coins,\n  };\n};\n\nconst getPopularCoinsSuccess = (coins: any[]) => {\n  return {\n    type: types.FETCH_POPULAR_COINS_SUCCESS,\n    coins,\n  };\n};\n\nconst getPopularCoinsFailure = (error: string) => {\n  return {\n    type: types.FETCH_POPULAR_COINS_FAILURE,\n    error,\n  };\n};\n\nexport const getPopularCoins = () => {\n  return async (dispatch: Dispatch<any>) => {\n    try {\n      const response = await fetchApi(apiEndPoints.popularCoins);\n      const json = await response.json();\n      if (response.ok) {\n        dispatch(getPopularCoinsSuccess(json.data));\n      } else {\n        dispatch(\n          getPopularCoinsFailure('Unable to fetch popular cryptocurrency.'),\n        );\n      }\n    } catch (error) {\n      dispatch(\n        getPopularCoinsFailure('Unable to fetch popular cryptocurrency.'),\n      );\n    }\n  };\n};\n\nconst getPopularCoinsDetailsSuccess = (coinsInfo: any) => {\n  return {\n    type: types.FETCH_POPULAR_COINS_DETAILS_SUCCESS,\n    coinsInfo,\n  };\n};\n\nconst getPopularCoinsDetailsFailure = (error: string) => {\n  return {\n    type: types.FETCH_POPULAR_COINS_DETAILS_FAILURE,\n    error,\n  };\n};\n\nexport const getPopularCoinsDetails = (coins: any[]) => {\n  return async (dispatch: Dispatch<any>) => {\n    const data = coins.map((coin: any) => coin.slug);\n    const requestURL = `${apiEndPoints.coinsInfo}${data.join(',')}`;\n    try {\n      const response = await fetchApi(requestURL);\n      const json = await response.json();\n      if (response.ok) {\n        dispatch(getPopularCoinsDetailsSuccess(json.data));\n      } else {\n        dispatch(\n          getPopularCoinsDetailsFailure(\n            'Unable to fetch popular coins details.',\n          ),\n        );\n      }\n    } catch (error) {\n      dispatch(\n        getPopularCoinsDetailsFailure('Unable to fetch popular coins details.'),\n      );\n    }\n  };\n};\n\nexport const followCoin = (coin: any) => {\n  return async (dispatch: Dispatch<any>, getState: any) => {\n    const userId = getState().profile.userId;\n    const following = getState().home.followingCoins.concat(coin);\n    const notification = getState().home.notificationCoins;\n    await setDoc(doc(db, 'users', userId), {\n      userId,\n      following,\n      notification,\n    });\n  };\n};\n\nexport const unfollowCoin = (unfollowedCoin: any) => {\n  return async (dispatch: Dispatch<any>, getState: any) => {\n    const userId = getState().profile.userId;\n    const following = getState().home.followingCoins.filter(\n      (coin: any) => coin.slug !== unfollowedCoin.slug,\n    );\n    const notification = getState().home.notificationCoins;\n    await setDoc(doc(db, 'users', userId), {\n      userId,\n      following,\n      notification,\n    });\n  };\n};\n\nconst getFollowingCoinsDetailsSuccess = (coinsInfo: any) => {\n  return {\n    type: types.FETCH_FOLLOWING_COINS_DETAILS_SUCCESS,\n    coinsInfo,\n  };\n};\n\nconst getFollowingCoinsDetailsFailure = (error: string) => {\n  return {\n    type: types.FETCH_FOLLOWING_COINS_DETAILS_FAILURE,\n    error,\n  };\n};\n\nexport const getFollowingCoinsDetails = (coins: any[]) => {\n  return async (dispatch: Dispatch<any>) => {\n    const data = coins.map((coin: any) => coin.slug);\n    const requestURL = `${apiEndPoints.coinsInfo}${data.join(',')}`;\n    try {\n      const response = await fetchApi(requestURL);\n      const json = await response.json();\n      if (response.ok) {\n        dispatch(getFollowingCoinsDetailsSuccess(json.data));\n      } else {\n        dispatch(\n          getFollowingCoinsDetailsFailure(\n            'Unable to fetch following coins details.',\n          ),\n        );\n      }\n    } catch (error) {\n      dispatch(\n        getFollowingCoinsDetailsFailure(\n          'Unable to fetch following coins details.',\n        ),\n      );\n    }\n  };\n};\n\nexport const startNotifications = (coin: any) => {\n  return async (dispatch: Dispatch<any>, getState: any) => {\n    const userId = getState().profile.userId;\n    const following = getState().home.followingCoins;\n    const notification = getState().home.notificationCoins.concat(coin);\n    await setDoc(doc(db, 'users', userId), {\n      userId,\n      following,\n      notification,\n    });\n  };\n};\n\nexport const stopNotifications = (unNotifiedCoin: any) => {\n  return async (dispatch: Dispatch<any>, getState: any) => {\n    const userId = getState().profile.userId;\n    const following = getState().home.followingCoins;\n    const notification = getState().home.notificationCoins.filter(\n      (coin: any) => coin.slug !== unNotifiedCoin.slug,\n    );\n    await setDoc(doc(db, 'users', userId), {\n      userId,\n      following,\n      notification,\n    });\n  };\n};\n"],"mappings":";;;;;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAGA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAKA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAKA;AACA;AACA;AAKA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAHA;AAKA;AACA;;;;A","sourceRoot":""}