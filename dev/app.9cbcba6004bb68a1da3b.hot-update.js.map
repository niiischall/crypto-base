{"version":3,"file":"app.9cbcba6004bb68a1da3b.hot-update.js","sources":["/Users/geekyants/Desktop/Hackathon-21/crypto-base/src/store/actions/actionProfile.ts"],"sourcesContent":["import { Dispatch } from 'redux';\n\nimport * as types from './actionTypes';\nimport { apiEndPoints, authApi } from '../../services/api';\n\nconst authSuccess = (userId: string, idToken: string, email: string) => {\n  return {\n    type: types.AUTH_SUCCESS,\n    userId,\n    idToken,\n    email,\n  };\n};\n\nconst authFailed = (error: string) => {\n  return {\n    type: types.AUTH_FAILED,\n    error,\n  };\n};\n\nexport const auth = (email: string, password: string, isSignUp: boolean) => {\n  const info = {\n    email: email,\n    password: password,\n    returnSecureToken: true,\n  };\n\n  let authURL = apiEndPoints.signUp;\n\n  if (!isSignUp) {\n    authURL = apiEndPoints.signIn;\n  }\n\n  return async (dispatch: Dispatch<any>) => {\n    try {\n      const response = await authApi(authURL, 'post', info);\n      if (response.ok) {\n        const json = await response.json();\n        dispatch(authSuccess(json.localId, json.idToken, info.email));\n        localStorage.setItem('idToken', json.idToken);\n        localStorage.setItem('userId', json.localId);\n        localStorage.setItem('userEmail', info.email);\n\n        const expirationDate = new Date(\n          new Date().getTime() + json.expiresIn * 1000 * 24,\n        );\n        localStorage.setItem('expirationDate', expirationDate);\n\n        dispatch(authAutoLogout(json.expiresIn));\n      }\n    } catch (error: any) {\n      dispatch(authFailed(error.response.data.error));\n    }\n  };\n};\n\nexport const authLogout = () => {\n  localStorage.removeItem('idToken');\n  localStorage.removeItem('userId');\n  localStorage.removeItem('expirationDate');\n  localStorage.removeItem('userEmail');\n  return {\n    type: types.AUTH_LOGOUT,\n  };\n};\n\nconst authAutoLogout = (time: number) => {\n  return (dispatch: Dispatch<any>) => {\n    setTimeout(() => {\n      dispatch(authLogout());\n    }, time * 1000);\n  };\n};\n\nexport const checkAuthState = () => {\n  return (dispatch: Dispatch<any>) => {\n    let tokenId = localStorage.getItem('idToken');\n    if (!tokenId) {\n      dispatch(authLogout());\n    } else {\n      let currentExpirationDate = new Date(\n        localStorage.getItem('expirationDate'),\n      );\n\n      if (currentExpirationDate && currentExpirationDate > new Date()) {\n        const userId = localStorage.getItem('userId');\n        const idToken = localStorage.getItem('idToken');\n        const userEmail = localStorage.getItem('userEmail');\n        if (userId && idToken && userEmail) {\n          dispatch(authSuccess(userId, idToken, userEmail));\n        }\n      } else {\n        authLogout();\n      }\n    }\n  };\n};\n"],"mappings":";;;;;;;;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;A","sourceRoot":""}