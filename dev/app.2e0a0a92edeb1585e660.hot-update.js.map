{"version":3,"file":"app.2e0a0a92edeb1585e660.hot-update.js","sources":["/Users/geekyants/Desktop/Hackathon-21/crypto-base/src/App.tsx","/Users/geekyants/Desktop/Hackathon-21/crypto-base/src/services/api.ts","/Users/geekyants/Desktop/Hackathon-21/crypto-base/src/store/actions/actions.ts"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport Header from './components/Header';\nimport Layout from './pages/Layout';\nimport Navigation from './components/Navigation';\nimport { getLatestListings } from './store/actions/actions';\n\nexport interface Props {}\n\nconst useStyles = makeStyles((theme) => ({\n  appContainer: {\n    width: 360,\n    height: 600,\n    backgroundColor: '#F8F8F8',\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'space-between',\n  },\n}));\n\nexport const App: React.FC<Props> = () => {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n\n  const latestListings = useSelector((store: any) => store.latestListings);\n  const [value, setValue] = useState<string>('home');\n\n  const handleChange = (event: any, newValue: string) => {\n    setValue(newValue);\n  };\n\n  useEffect(() => {\n    if (latestListings.length === 0) {\n      dispatch(getLatestListings());\n    }\n  }, [dispatch, latestListings]);\n\n  return (\n    <div className={classes.appContainer}>\n      <Header currentPage={value} />\n      <Layout currentPage={value} />\n      <Navigation currentPage={value} switchPage={handleChange} />\n    </div>\n  );\n};\n\nexport default App;\n","const baseAPI = 'https://pro-api.coinmarketcap.com/';\nconst apiVersion = 'v1';\nconst apiKey = `&CMC_PRO_API_KEY=${process.env.REACT_APP_CMC_KEY}`;\n\nexport const apiEndPoints = {\n  latestListing: '/cryptocurrency/listings/latest?limit=25',\n  listingInfo: '/cryptocurrency/info?slug=',\n};\n\nexport async function fetchApi(\n  endPoint: string,\n  payload?: {} | undefined,\n  method: string = 'get',\n  headers?: {},\n) {\n  let path = `${baseAPI}${apiVersion}${endPoint}${apiKey}`;\n  const headersObject: any = {\n    ...headers,\n  };\n  let request = {\n    body: JSON.stringify(payload),\n    headers: headersObject,\n    method: method.toLowerCase(),\n  };\n\n  try {\n    return fetch(path, request);\n  } catch (e) {\n    const stringError = e && e.toString && e.toString();\n    const type =\n      stringError === 'TypeError: Network request failed'\n        ? 'networkError'\n        : 'unknown';\n    const error = {\n      text: stringError,\n      type,\n    };\n    throw error;\n  }\n}\n","import { Dispatch } from 'redux';\n\nimport * as types from './actionTypes';\nimport { apiEndPoints, fetchApi } from '../../services/api';\n\nconst getLatestListingsSuccess = (listings: any[]) => {\n  return {\n    type: types.FETCH_LATEST_LISTINGS_SUCCESS,\n    listings,\n  };\n};\n\nconst getLatestListingsFailure = (error: string) => {\n  return {\n    type: types.FETCH_LATEST_LISTINGS_FAILURE,\n    error,\n  };\n};\n\nexport const getLatestListings = () => {\n  return async (dispatch: Dispatch<any>) => {\n    try {\n      const response = await fetchApi(apiEndPoints.latestListing);\n      if (response.ok) {\n        const json = await response.json();\n        dispatch(getLatestListingsSuccess(json.data));\n      } else {\n        dispatch(\n          getLatestListingsFailure(\n            'Unable to fetch latest cryptocurrency market listings.',\n          ),\n        );\n      }\n    } catch (error) {\n      dispatch(\n        getLatestListingsFailure(\n          'Unable to fetch latest cryptocurrency market listings.',\n        ),\n      );\n    }\n  };\n};\n\nconst getCoinsInfoSuccess = (coinsInfo: {}) => {\n  return {\n    type: types.FETCH_COINS_INFO_SUCCESS,\n    coinsInfo,\n  };\n};\n\nconst getCoinsInfoFailure = (error: string) => {\n  return {\n    type: types.FETCH_COINS_INFO_FAILURE,\n    error,\n  };\n};\n\nexport const getCoinsInfo = (coins: any[]) => {\n  return async (dispatch: Dispatch<any>) => {\n    const requestURL = `${apiEndPoints.listingInfo}${coins.join(',')}`;\n    try {\n      const response = await fetchApi(requestURL);\n      if (response.ok) {\n        const json = await response.json();\n        dispatch(getCoinsInfoSuccess(json.data));\n      } else {\n        dispatch(getCoinsInfoFailure('Unable to fetch respective coin info.'));\n      }\n    } catch (error) {\n      dispatch(getCoinsInfoFailure('Unable to fetch respective coin info.'));\n    }\n  };\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AADA;AAWA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHA;AAAA;AAAA;AAAA;AAAA;AAMA;AAEA;;;;;;;;;;;;AChDA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAFA;AAKA;AAMA;AACA;AAAA;AAGA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;;;;;;;;;;;;ACrCA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;A","sourceRoot":""}