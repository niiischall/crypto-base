{"version":3,"file":"app.c4fb8408b897c04e8561.hot-update.js","sources":["/Users/geekyants/Desktop/Hackathon-21/crypto-base/src/components/Following/Follow.tsx"],"sourcesContent":["import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { IconButton } from '@material-ui/core';\nimport { NotificationsActive } from '@material-ui/icons';\n\nimport {\n  startNotifications,\n  stopNotifications,\n} from '../../store/actions/actionHome';\nimport { normalizePrice, isCoinPresent } from '../../services/helpers';\n\nexport interface Props {}\n\nconst useStyles = makeStyles((theme) => ({\n  followContainer: {\n    width: '100%',\n    height: '355px',\n    overflowY: 'auto',\n  },\n  listing: {\n    borderRadius: '5px',\n    backgroundColor: '#eeeeee',\n    display: 'flex',\n    alignItems: 'center',\n    width: '85%',\n    height: 75,\n    margin: '0px auto',\n    marginTop: 15,\n    marginBottom: 15,\n    paddingLeft: 15,\n    paddingRight: 15,\n    transition: 'all .2s linear',\n    '&:hover': {\n      backgroundColor: '#f8f8f8',\n      boxShadow: '0 0 0 1px rgb(0 0 0 / 5%), 0 5px 15px rgb(0 0 0 / 15%)',\n    },\n  },\n  textBox: {\n    marginLeft: 10,\n  },\n  icon: {\n    color: '#979797',\n    fontSize: 18,\n  },\n  iconButton: {\n    marginLeft: 'auto',\n  },\n  image: {\n    width: 30,\n    height: 30,\n  },\n  name: {\n    fontSize: 14,\n    fontWeight: 600,\n    marginRight: 5,\n  },\n  symbol: {\n    fontSize: 8,\n    fontWeight: 700,\n    color: '#669900',\n  },\n  price: {\n    color: '#979797',\n    display: 'block',\n    marginTop: 5,\n    fontSize: 10,\n    fontWeight: 500,\n  },\n  priceChange: {\n    fontSize: 10,\n    marginLeft: 3,\n  },\n  change: {\n    marginRight: 2,\n    fontWeight: 500,\n  },\n}));\n\nexport const Follow: React.FC<Props> = (props) => {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n\n  const followingCoins = useSelector((state: any) => state.home.followingCoins);\n  const notificationCoins = useSelector(\n    (state: any) => state.home.notificationCoins,\n  );\n  const coinsDetails = useSelector(\n    (state: any) => state.home.followingCoinsDetails,\n  );\n\n  const setNotification = (coinSlug: string) => {\n    const isCoinNotified = isCoinPresent(coinSlug, notificationCoins);\n    if (isCoinNotified) {\n      dispatch(stopNotifications(coinSlug));\n    } else {\n      dispatch(startNotifications(coinSlug));\n    }\n  };\n\n  const renderPriceChange = (change: any) => {\n    const isPositive = change > 0;\n    const absoluteChange = Math.abs(change);\n    return (\n      <span\n        className={classes.priceChange}\n        style={{ color: isPositive ? '#006600' : '#cc3300' }}\n      >\n        {isPositive ? (\n          <span className={classes.change}>&uarr;{absoluteChange}%</span>\n        ) : (\n          <span className={classes.change}>&darr;{absoluteChange}%</span>\n        )}\n      </span>\n    );\n  };\n\n  return (\n    <div className={classes.followContainer}>\n      {followingCoins.length > 0 &&\n        coinsDetails &&\n        Object.keys(coinsDetails).length > 0 &&\n        followingCoins.map((listing: any) => {\n          const logo = coinsDetails[listing.id].logo;\n          return (\n            <div className={classes.listing} key={listing.id}>\n              <img\n                src={logo}\n                alt={`${listing.slug}-logo`}\n                className={classes.image}\n              />\n              <div className={classes.textBox}>\n                <span className={classes.name}>{listing.name}</span>\n                <span className={classes.symbol}>{listing.symbol}</span>\n                <span className={classes.price}>\n                  ${normalizePrice(listing.quote.USD.price)} |\n                  {renderPriceChange(\n                    listing.quote.USD.percent_change_24h.toFixed(2),\n                  )}\n                </span>\n              </div>\n              <IconButton\n                className={classes.iconButton}\n                onClick={() => setNotification(listing.slug)}\n                disableRipple\n              >\n                <NotificationsActive className={classes.icon} />\n              </IconButton>\n            </div>\n          );\n        })}\n    </div>\n  );\n};\n\nexport default Follow;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAEA;AAIA;;AAIA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAbA;AAkBA;AACA;AADA;AAGA;AACA;AACA;AAFA;AAIA;AACA;AADA;AAGA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AA3DA;AAiEA;AACA;AACA;AAEA;AACA;AAGA;AACA;AAGA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAFA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAPA;AAAA;AAAA;AAAA;AAAA;AAWA;AACA;AACA;AACA;AAAA;AAKA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHA;AAAA;AAAA;AAAA;AAAA;AAWA;AACA;AACA;AAHA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AALA;AAAA;AAAA;AAAA;AAAA;AAhBA;AAAA;AAAA;AAAA;AAAA;AAyBA;AAhCA;AAAA;AAAA;AAAA;AAAA;AAmCA;AAEA;;;;A","sourceRoot":""}