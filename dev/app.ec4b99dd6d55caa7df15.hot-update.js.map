{"version":3,"file":"app.ec4b99dd6d55caa7df15.hot-update.js","sources":["/Users/geekyants/Desktop/Hackathon-21/crypto-base/src/components/SearchInput/index.tsx"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { FormControl, TextField, InputAdornment } from '@material-ui/core';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Search } from '@material-ui/icons';\nimport { debounce } from 'lodash';\n\nimport SearchResults from './SearchResults';\nimport { searchCoinTerm, searchCoin } from '../../store/actions/actionSearch';\n\nexport interface Props {}\n\nconst useStyles = makeStyles((theme) => ({\n  form: {\n    margin: theme.spacing(1),\n  },\n}));\n\nexport const SearchInput: React.FC<Props> = (props) => {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n\n  const search = useSelector((state: any) => state.search.searchedCoinText);\n  const totalCoins = useSelector((state: any) => state.search.totalCoins);\n\n  const [searchedResult, setSearchedResult] = useState<any[]>([]);\n  const [suggestions, showSuggestions] = useState<boolean>(false);\n\n  //Debouncing logic for searching through the coins.\n  const searching = () => {\n    if (totalCoins.length > 0) {\n      const filteredSearches = totalCoins.filter((coin: any) => {\n        if (coin.slug.toLowerCase().includes(search.toLowerCase())) {\n          return coin;\n        }\n      });\n      setSearchedResult(filteredSearches);\n    }\n  };\n  const delayedSearch = useCallback(debounce(searching, 300), [search]);\n  const searchHandler = (term: string) => {\n    dispatch(searchCoinTerm(term));\n  };\n  useEffect(() => {\n    delayedSearch();\n    return delayedSearch.cancel;\n  }, [search, delayedSearch]);\n\n  //Handlers for interacting with the search\n  const onInputBlur = () => {\n    setTimeout(() => showSuggestions(false), 500);\n  };\n  const onInputFocus = () => {\n    showSuggestions(true);\n  };\n\n  //Handler for searching a coin\n  const handleCoinSearch = (coinSlug: string) => {\n    dispatch(searchCoin(coinSlug));\n  };\n\n  //Properties for Mui-TextField\n  const InputProps = {\n    startAdornment: (\n      <InputAdornment position=\"start\">\n        <Search fontSize=\"large\" />\n      </InputAdornment>\n    ),\n    disableUnderline: true,\n    style: { fontSize: 14, color: '#323232' },\n    onBlur: onInputBlur,\n    onFocus: onInputFocus,\n    value: search,\n  };\n\n  return (\n    <FormControl className={classes.form}>\n      <TextField\n        id=\"coin-search-input\"\n        placeholder=\"Search coins\"\n        InputProps={InputProps}\n        onChange={(event) => searchHandler(event.target.value)}\n      />\n      {suggestions && searchedResult && searchedResult.length > 0 && (\n        <SearchResults results={searchedResult} search={handleCoinSearch} />\n      )}\n    </FormControl>\n  );\n};\n\nexport default SearchInput;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;AAIA;AACA;AACA;AADA;AADA;AAMA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAVA;AAaA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AARA;AAAA;AAAA;AAAA;AAAA;AAYA;AAEA;;;;A","sourceRoot":""}